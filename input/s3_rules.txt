{"ruleId":"S3BucketEncryption","ruleversion":"1.0","description":"Ensure all S3 buckets employ encryption-at-rest","disabled":false,"ruleDefinition":"@info(name = 'query1')from aws_s3 select json:toObject(awsS3) as obj insert into temp;@info(name = 'query2')from temp select json:getString(obj, '$.awsS3.ResourceType') as affected_resource_type, json:getString(obj, '$.awsS3.Details.Name') as affected_resource_name, json:getString(obj, '$.awsS3.Encryption.ServerSideEncryptionConfiguration') as sse insert into temp1;@info(name = 'query3')from temp1 select ifThenElse(sse is null, 'False' , 'True') as encrypted, ifThenElse(sse is null, json:toString(json:setElement('{}', '$', '[{}]', 'Rules')) , sse) as sse, affected_resource_type, affected_resource_name insert into temp2;@info(name = 'query4')from temp2#json:tokenizeAsObject(json:getObject( sse, '$.Rules'), '$') select affected_resource_type, affected_resource_name, encrypted, sse, ifThenElse(  json:getString(jsonElement, '$.ApplyServerSideEncryptionByDefault.SSEAlgorithm') == 'aws:kms'  or  json:getString(jsonElement, '$.ApplyServerSideEncryptionByDefault.SSEAlgorithm') == 'AES256' ,  'Valid', 'Unknown') as algorithm_state insert into temp3;@info(name = 'query5')from temp3[encrypted == 'False' or algorithm_state=='Unknown']select affected_resource_type, affected_resource_name, encrypted,algorithm_state insert into s3_outputstream;","action":"add","type":["aws_s3"]}

{"ruleId":"S3BucketHttps","ruleversion":"1.0","description":"At the Amazon S3 bucket level, you can configure permissions through a bucket policy making the objects accessible only through HTTPS","disabled":false,"ruleDefinition":"@info(name='query1')from aws_s3 select json:toObject(awsS3) as obj insert  into temp;@info(name='query2')from tempselect json:getString(obj,'$.awsS3.ResourceType') as affected_resource_type,json:getString(obj,'$.awsS3.Details.Name') as affected_resource_name,json:getString(obj,'$.awsS3.Policy') as bucket_policy insert  into temp1;@info(name = 'query3')from temp1 select ifThenElse(bucket_policy is null, 'False' , 'True') as bucket_policy_configured, ifThenElse(bucket_policy is null, json:toString(json:setElement('{}', '$', '[{}]', 'Statement')) , bucket_policy) as bucket_policy, affected_resource_type, affected_resource_name insert into temp2;@info(name='query4')from temp2#json:tokenizeAsObject(json:getObject( bucket_policy, '$.Statement'),'$') select affected_resource_type,affected_resource_name,bucket_policy_configured,ifThenElse(json:getString(jsonElement, '$.Effect') == 'Deny' and  json:getString(jsonElement,'$.Condition.Bool.aws:SecureTransport') == 'false' ,'True', 'False') as s3_transport_secured insert  into temp3;@info(name='query5')from temp3[bucket_policy_configured == 'False' or s3_transport_secured == 'False'] select affected_resource_type,affected_resource_name,s3_transport_secured,bucket_policy_configuredinsert  into s3_outputstream;","action":"add","type":["aws_s3"]}

{"ruleId":"S3CloudTrailPublicAccess","ruleversion":"1.0","description":"Ensure the S3 bucket used to store CloudTrail logs is not publicly accessible. Note: Assumption is that S3 ACL","disabled":false,"ruleDefinition":"@info(name = 'query1')from aws_s3 select json:toObject(awsS3) as obj insert into temp;@info(name = 'query2')from temp -- Will change it to check null for policyselect json:getString(obj, '$.awsS3.ResourceType') as affected_resource_type, json:getString(obj, '$.awsS3.Details.Name') as affected_resource_name, json:getObject ( obj, '$.awsS3.Acl.Grants') as grants,json:getString(obj,'$.awsS3.Policy') as bucket_policyinsert into temp1;-- query3 and query4 Handles S3 ACL conditions first@info(name = 'query3')from temp1#json:tokenizeAsObject(grants, '$') select affected_resource_type,affected_resource_name,bucket_policy,json:getString(jsonElement, '$.Grantee.Type') as granteeType, json:getString(jsonElement, '$.Grantee.URI') as granteeURI, json:getString(jsonElement, '$.Permission') as Permission insert into temp2;@info(name = 'query4')from temp2 select affected_resource_name,affected_resource_type,bucket_policy,ifThenElse(granteeURI == 'http://acs.amazonaws.com/groups/global/AllUsers' or     granteeURI == 'https://acs.amazonaws.com/groups/global/Authenticated Users',     'True', 'False') as cloudtrail_log_publicView insert into temp3;@info(name = 'query5')from temp3 select ifThenElse(bucket_policy is null, 'False' , 'True') as bucket_policy_configured, ifThenElse(bucket_policy is null, json:toString(json:setElement('{}', '$', '[{}]', 'Statement')) , bucket_policy) as bucket_policy, affected_resource_type, affected_resource_name ,cloudtrail_log_publicViewinsert into temp4;@info(name = 'query6')from temp4[cloudtrail_log_publicView =='True']#json:tokenizeAsObject(json:getObject( bucket_policy, '$.Statement'),'$')  selectaffected_resource_type,affected_resource_name,cloudtrail_log_publicView,bucket_policy_configured,ifThenElse(             json:getString(jsonElement, '$.Effect') == 'Allow' and  json:getString(jsonElement,'$.Principal') == '*'             or  json:getString(jsonElement,'$.Principal') == json:toString(json:setElement('{}', '$', '*', 'AWS')) , 'True', 'False') as cloudtrail_log_annonymous_access insert into temp5;@info(name = 'query7')from temp5[cloudtrail_log_annonymous_access == 'True' or cloudtrail_log_publicView == 'True'] select affected_resource_name,affected_resource_type,cloudtrail_log_publicView, cloudtrail_log_annonymous_access,bucket_policy_configuredinsert into s3_outputstream;","action":"add","type":["aws_s3"]}

{"ruleId":"S3PublicAccess","ruleversion":"1.0","description":"Ensure that S3 Buckets are configured with Block public access (bucket settings)","disabled":false,"ruleDefinition":"@info(name = 'query1')from aws_s3 select json:toObject(awsS3) as obj insert into temp;@info(name = 'query2')from temp select json:getString(obj, '$.awsS3.ResourceType') as affected_resource_type, json:getString(obj, '$.awsS3.Details.Name') as affected_resource_name, ifThenElse( json:getBool(obj, '$.awsS3.AccessBlock.PublicAccessBlockConfiguration.BlockPublicAcls') == true and json:getBool(obj, '$.awsS3.AccessBlock.PublicAccessBlockConfiguration.IgnorePublicAcls') == true and json:getBool(obj, '$.awsS3.AccessBlock.PublicAccessBlockConfiguration.BlockPublicPolicy') == true and json:getBool(obj, '$.awsS3.AccessBlock.PublicAccessBlockConfiguration.RestrictPublicBuckets') == true, 'False', 'True') as is_publicly_accessible insert into temp2;@info(name = 'query3')from temp2[is_publicly_accessible == 'True'] select affected_resource_type, affected_resource_name, is_publicly_accessible insert into s3_outputstream;","action":"add","type":["aws_s3"]}

{"ruleId":"S3PublicReadAccess","ruleversion":"1.0","description":"Ensure that your S3 buckets content permissions details cannot be viewed by anonymous users in order to protect against unauthorized access. An S3 bucket that grants READ_ACP (VIEW PERMISSIONS) access to everyone can allow unauthorized users to look for the objects ACL (Access Control List) permissions. Note: Assumption is that S3 ACL will always be present","disabled":false,"ruleDefinition":"@info(name = 'query1')from aws_s3 select json:toObject(awsS3) as obj insert into temp;@info(name = 'query2')from temp select json:getString(obj, '$.awsS3.ResourceType') as affected_resource_type, json:getString(obj, '$.awsS3.Details.Name') as affected_resource_name, json:getObject ( obj, '$.awsS3.Acl.Grants') as grants insert into temp1;@info(name = 'query3')from temp1#json:tokenizeAsObject(grants, '$') select affected_resource_type,affected_resource_name,json:getString(jsonElement, '$.Grantee.Type') as granteeType, json:getString(jsonElement, '$.Grantee.URI') as granteeURI, json:getString(jsonElement, '$.Permission') as Permission insert into temp2;@info(name = 'query4')from temp2 select affected_resource_name,affected_resource_type,ifThenElse(granteeType == 'Group' and granteeURI == 'http://acs.amazonaws.com/groups/global/AllUsers' and Permission == 'READ_ACP', 'True', 'False') as publicView insert into temp3;@info(name = 'query5')from temp3[publicView == 'True'] select affected_resource_name,affected_resource_type,publicView insert into s3_outputstream;","action":"add","type":["aws_s3"]}

{"ruleId":"S3AccesslogEnabledForCloudtrail","ruleversion":"1.0","description":"Ensure S3 bucket access logging is enabled on the CloudTrail S3 bucket","disabled":false,"ruleDefinition":"@info(name = 'query1')from aws_s3 select json:toObject(awsS3) as obj insert into temp;from temp[json:isExists(obj,'$.awsS3.Logging.LoggingEnabled') == false] select json:getString(obj, '$.awsS3.ResourceType') as affected_resource_type, json:getString(obj, '$.awsS3.Details.Name') as affected_resource_name,json:isExists(obj,'$.awsS3.Logging.LoggingEnabled') as is_cloudtrail_log_enabledinsert into s3_outputstream;","action":"add","type":["aws_s3"]}
