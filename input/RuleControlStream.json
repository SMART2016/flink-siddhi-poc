[
  {
    "ruleset": {
      "1": {
        "ruleId": "1",
        "ruleversion": "1.0",
        "disabled": false,
        "ruleDefinition": "from s3_access_log select json:toObject(s3log) as obj insert into temp; from temp select json:getString(obj,'$.s3log.requestId') as access_requester,json:getString(obj,'$.s3log.httpStatus') as attempted_response,json:getString(obj,'$.s3log.bucket') as accessed_bucket,json:getString(obj,'$.s3log.operation') as attempted_action insert into temp2;from every( e1 = temp2 ) -> e2 = temp2[ e1.access_requester == access_requester and (e1.attempted_response == attempted_response) and attempted_response == '404'] within 30 sec select e1.access_requester , e1.attempted_response, e1.accessed_bucket,e1.attempted_action insert into outputstream;",
        "action": "add",
        "type": [
          "s3_access_log"
        ]
      },
      "2": {
        "ruleId": "2",
        "ruleversion": "1.0",
        "disabled": false,
        "ruleDefinition": "from s3_access_log select json:toObject(s3log) as obj insert into temp;from temp select json:getString(obj,'$.s3log.requestId') as access_requester,json:getString(obj,'$.s3log.bucket') as accessed_bucket,json:getString(obj,'$.s3log.operation') as attempted_action,json:getString(obj,'$.s3log.httpStatus') as attempted_response,json:getString(obj,'$.s3log.errorCode') as attempted_error insert into temp2;from temp2#window.time(10 sec) select access_requester,accessed_bucket,attempted_response,attempted_error,count() as attempts group by access_requester,accessed_bucket having attempted_response == '404' and attempts > 3 insert into outputstream;",
        "action": "add",
        "type": [
          "s3_access_log"
        ]
      }
    }
  },
  {
    "1": {"ruleId":"1","ruleversion":"1.0","disabled":false,"ruleDefinition":"from s3_access_log select json:toObject(s3log) as obj insert into temp; from temp select json:getString(obj,'$.s3log.requestId') as access_requester,json:getString(obj,'$.s3log.httpStatus') as attempted_response,json:getString(obj,'$.s3log.bucket') as accessed_bucket,json:getString(obj,'$.s3log.operation') as attempted_action insert into temp2;from every( e1 = temp2 ) -> e2 = temp2[ e1.access_requester == access_requester and (e1.attempted_response == attempted_response) and attempted_response == '404'] within 30 sec select e1.access_requester , e1.attempted_response, e1.accessed_bucket,e1.attempted_action insert into outputstream;","action":"add","type":["s3_access_log"]},
    "2": {"ruleId":"2","ruleversion":"1.0","disabled":false,"ruleDefinition":"from s3_access_log select json:toObject(s3log) as obj insert into temp;from temp select json:getString(obj,'$.s3log.requestId') as access_requester,json:getString(obj,'$.s3log.bucket') as accessed_bucket,json:getString(obj,'$.s3log.operation') as attempted_action,json:getString(obj,'$.s3log.httpStatus') as attempted_response,json:getString(obj,'$.s3log.errorCode') as attempted_error insert into temp2;from temp2#window.time(10 sec) select access_requester,accessed_bucket,attempted_response,attempted_error,count() as attempts group by access_requester,accessed_bucket having attempted_response == '404' and attempts > 3 insert into outputstream;","action":"add","type":["s3_access_log"]},
    "3":  {"ruleId":"3","ruleversion":"1.0","disabled":false,"ruleDefinition":"from aws_s3 select json:toObject(awsS3) as obj insert into temp;from temp select json:getString(obj,'$.awsS3.ResourceType') as affected_resource_type,json:getString(obj,'$.awsS3.Details.Name') as affected_resource_name,json:getString(obj,'$.awsS3.Encryption.ServerSideEncryptionConfiguration') as encryption,json:getString(obj,'$.awsS3.Encryption.ServerSideEncryptionConfiguration.Rules[0].ApplyServerSideEncryptionByDefault.SSEAlgorithm') as algorithm insert into temp2;from temp2 select  affected_resource_name,affected_resource_type,ifThenElse(encryption == ' ','False','True') as encrypted,ifThenElse(encryption != ' ' and algorithm == 'aws:kms','Valid','Unknown') as algorithm_state insert into s3_outputstream","action":"add","type":["aws_s3"]}
  }
]