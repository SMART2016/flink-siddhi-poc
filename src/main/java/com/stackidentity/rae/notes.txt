///**
// * Example Rule STream record :
// * {
// *     "key": "S3_LOG",
// *     "rule":""
// * }
// */
//class RuleKeySelector implements KeySelector<String,String>{
//    @Override
//    public String getKey(String rule) throws Exception {
//        JSONObject ruleJson = new JSONObject(rule);
//        return ruleJson.getString("key");
//    }
//}
//
///**
// * Example Data STream record :
// * {
// *     "key": "S3_LOG",
// *     "s3log":{ // JSON for S3 log object ....}
// * }
// */
//class DataKeySelector implements KeySelector<String,String>{
//    @Override
//    public String getKey(String data) throws Exception {
//        JSONObject dataJson = new JSONObject(data);
//        return dataJson.getString("key");
//    }
//}

//class DataCollector extends RichCoFlatMapFunction<String, String, String> {
//
//    private ValueState<String> ruleState = null;
//
//    @Override
//    public void open(Configuration config) {
//        ValueStateDescriptor<String> descriptor = new ValueStateDescriptor<String>(
//                // state name
//                "rule",
//                // type information of state
//                TypeInformation.of(new TypeHint<String>() {
//                }));
//        ruleState = getRuntimeContext().getState(descriptor);
//    }
//
//    @Override
//    public void flatMap2(String rule, Collector<String> out) throws Exception {
//        JSONObject ruleJson = new JSONObject(rule);
//        String ruleStr = ruleJson.getString("rule");
//        ruleState.update(ruleStr);
//    }
//
//    @Override
//    public void flatMap1(String data, Collector<String> out) throws Exception {
//        if (ruleState.value() != "") {
//            JSONObject dataJson = new JSONObject(data);
//            dataJson.append("rule",ruleState.value());
//            out.collect(dataJson.toString());
//        }
//    }
//}



//The query says:
    //for each event fro inputstream , create a json obect from the event string message and insert the object into temp table.
    //from temp table select json properties of the json object in temp and insert them as individual columns/fields in temp2 table.
    //Create two internal streams from temp2 e2 followed by e1 and  for each event in the temp2 stream and if another event arrives
    //within 30 seconds with a value for e2.attempted_response attribute being equal to e1.attempted_response of the initial event e1,
    //an output is generated and sent to the output stream.
    private static final String SIDDHI_PATTERN_TEST_CQL ="from inputStream select json:toObject(s3log) as obj insert into temp;" +
            "from temp select " +
            "json:getString(obj,'$.s3log.requestId') as access_requester," +
            "json:getString(obj,'$.s3log.httpStatus') as attempted_response," +
            "json:getString(obj,'$.s3log.bucket') as accessed_bucket," +
            "json:getString(obj,'$.s3log.operation') as attempted_action " +
            "insert into temp2;"+
            "from every( e1 = temp2 ) -> e2 = temp2[ e1.access_requester == access_requester and " +
            "(e1.attempted_response == attempted_response) and attempted_response == '404'] " +
            "within 30 sec " +
            "select e1.access_requester , e1.attempted_response, e1.accessed_bucket,e1.attempted_action " +
            "insert into outputStream;";